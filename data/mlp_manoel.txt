import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

import org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

public class MultiLayerPerceptron {
	
	// Fazer com que a entrada seja escolhida aleatoriamente com isso (COMO) mapear as entradas
	
	// ok = inicializado
	// emite sinal recebe sinal
	static int numberHiddenLayers; // ok
	static int numberLayers; // ok
	static int numberInputNeurons; // ok
	static int[] numberNeurons; // ok
	static int numberOutputNeurons; // ok
	
	static ArrayList<Double[]> bias; // ok numero de camadas com numero de neuronios
	Double [][] delta; // ok numero de camadas com numero de neuronios
	Double [][] oldDelta; //ok numero de camadas com numero de neuronios
	
	static ArrayList<Double[][]> weight; // ok numero de camadas com numero de neuronio que emite para que recebe
	ArrayList<Double[][]> oldWeight; // ok numero de camadas com numero de neuronio que emite para que recebe

	
	Double [] netOutput; // ok numero da entrada com a net da resposta
	
	static Double [][] input; // tabela de entrada

	static Double [][] output; // tabela de saida (resposta - f(net))
	static Double [] errorOutput;
	static Double alfa;
	static Double beta;
	public Random random;
	int totalIteration;
	static ArrayList<Double[]> sensibility;
	
	// ok = construtor 
	public MultiLayerPerceptron(double [] inputMOEADDRA) throws IOException{
		totalIteration = 1;
		String csvFile1 = "/Users/mgmmacedo/Documents/workspace/RecPadCoronary/src/allheart_normalizado.csv";
		readData(csvFile1);
//		System.out.println(getOutput()[0][0]);
//		System.out.println(getInput()[296][12]);
		
		alfa = (0.1);
		beta = (0.55);
		// A heart-c tem 13 entradas com 1 saida
		numberInputNeurons = 13;
		numberOutputNeurons = 5;
		oldWeight = new ArrayList<Double[][]>();
		weight  = new ArrayList<Double[][]>();
		sensibility = new ArrayList<Double[]>();
		netOutput = new Double[numberOutputNeurons];
		errorOutput = new Double[numberOutputNeurons];
		
		
		// 0,1,2
		// as tres primeiras posicoes do vetor equivalem ao numero de camadas escondidas
		numberHiddenLayers = 0;
		for (int i = 0; i < 3; i++) {
			if((int)inputMOEADDRA[i]!=0){
				numberHiddenLayers++;
			}	
		}
//		System.out.println("------");
		numberLayers = (numberHiddenLayers+2);
		numberNeurons = new int[numberLayers];
		numberNeurons[0] = numberInputNeurons;
		numberNeurons[numberLayers-1] = numberOutputNeurons;
		int z = 0;
		for (int i = 0; i < 3; i++) {
			if((int)inputMOEADDRA[i]!=0){
				numberNeurons[z+1]= (int)inputMOEADDRA[i];
				z++;
			}
		}

		
		
//		System.out.println("------");
		// 13 entradas com no maximo 26 neuronios = 338
		// pesos da camada de entrada para hidden
		// a partir de 344 
		// 26 neuronios primeira + 26 neuronios segunda 
		// 26 neuronios segunda + 5 neuronios
		// antigopesos, deltapesos
		
		for (int i = 0; i < numberLayers-1; i++) {	
			int count = 0;
			int temp = 0;
			if(i==1){
				temp = 338;
			}else if(i==numberLayers-1){
				temp = 676;
			}else{
				temp = 0;
			}
			Double [][] pesosInternos = new Double[numberNeurons[i]][numberNeurons[i+1]];
			Double [][] arrayZero = new Double[numberNeurons[i]][numberNeurons[i+1]];
			
			for (int j = 0; j < numberNeurons[i]; j++) {
				for (int k = 0; k < numberNeurons[i+1]; k++) {
					pesosInternos[j][k] = (double)inputMOEADDRA[3+(count+temp)];
					arrayZero[j][k] = 0.0;
					count++;
				}
			}
			oldWeight.add(arrayZero);
			weight.add(pesosInternos);
			sensibility.add(new Double[numberNeurons[i]]);
			
		}
		
		// inicializar bias, antigodelta, delta
		ArrayList<Double[]> biasX = new ArrayList<Double[]>();
		int count = 0;
//		System.out.println(inputMOEADDRA.length);
		for (int i = 1; i < numberLayers; i++) {
			Double[] b = new Double[numberNeurons[i]];
			for (int j = 0; j < numberNeurons[i]; j++) {
				b[j] = (Double)inputMOEADDRA[(count+1693)];
				count++;
				
			}
			biasX.add(b);
		}
		bias = (biasX);
			
		
	}

	public Double[] forwardBackward(){

		ArrayList<Double[]> newNet = new ArrayList<Double[]>();
		ArrayList<Double[]> newFnet = new ArrayList<Double[]>();
		
		for (int j = 0; j < numberLayers; j++) {
			Double[] x = new Double [numberNeurons[j]];
			for (int k = 0; k < numberNeurons[j]; k++) {
					x[k] = 0.0;
			}
			newNet.add(x);
			newFnet.add(x);
			
		}
		
		// Para cada iteracao
		for (int iteration = 0; iteration <= totalIteration; iteration++) {
			int eachLayer = 0;
			// Para cada exemplo
			for (int eachInput = 0; eachInput < input.length; eachInput++) {
				
				// Calcular o sinal da camada entrada para a primeira camada escondida
				Double []nets = new Double[numberNeurons[1]];
				Double []fnets = new Double[numberNeurons[1]];
				
				for (int eachHiddenNeuron = 0; eachHiddenNeuron < numberNeurons[1]; eachHiddenNeuron++) {
					nets[eachHiddenNeuron] = 0.0;
					nets[eachHiddenNeuron] = bias.get(0)[eachHiddenNeuron];
					Double x = 0.0;
					for (int eachInputRow = 0; eachInputRow < numberNeurons[0]; eachInputRow++) {
						x = Math.ulp(weight.get(0)[eachInputRow][eachHiddenNeuron]*input[eachInput][eachInputRow]);
						nets[eachHiddenNeuron] += x;			
					}
					fnets[eachHiddenNeuron] = Math.ulp(1.0 / (1 + Math.exp(-nets[eachHiddenNeuron])));
				}
//				System.out.println(fnets[0]);
				// Salvar net e fnet da camada de entrada para camada escondida
				newNet.set(0, nets);
				newFnet.set(0, fnets);
				
				// Calcular o sinal da primeira camada escondida até a saida
				for (eachLayer =1; eachLayer < numberLayers-1; eachLayer++) {
					
					nets = new Double[numberNeurons[eachLayer+1]];
					fnets = new Double[numberNeurons[eachLayer+1]];
			
					for (int eachHiddenNeuronNext = 0; eachHiddenNeuronNext < numberNeurons[eachLayer+1]; eachHiddenNeuronNext++) {
						nets[eachHiddenNeuronNext] = 0.0;
						nets[eachHiddenNeuronNext] = bias.get(eachLayer)[eachHiddenNeuronNext];
		
						for (int eachHiddenNeuronJ = 0; eachHiddenNeuronJ < numberNeurons[eachLayer]; eachHiddenNeuronJ++) {
							nets[eachHiddenNeuronNext] += Math.ulp((weight.get(eachLayer)[eachHiddenNeuronJ][eachHiddenNeuronNext])*newFnet.get(eachLayer-1)[eachHiddenNeuronJ]);
						
						}
						

						fnets[eachHiddenNeuronNext] = Math.ulp(1.0 / (1 + Math.exp(-nets[eachHiddenNeuronNext])));
					}
					
					// Salvar cada net e fnet 
					newNet.set(eachLayer, nets);
					newFnet.set(eachLayer, fnets);
					
					
				}
				// Como todo sinal chegou a saida, calcularemos o erro 
//				System.out.println("length----"+newFnet.get(numberLayers-2).length);
				for (int i = 0; i < numberOutputNeurons; i++) {
					if(newFnet.get(numberLayers-1)[i]<0.0001){
						errorOutput[i] = output[eachInput][i] - (0.0);
					}else{
						errorOutput[i] = output[eachInput][i] - (newFnet.get(numberLayers-1)[i]);
					}
//					System.out.println("errorOutput[i]----"+ (output[eachInput][i] - newNet.get(numberLayers-2)[i]));

				}
		
				// ------------------------
				// Começa o backpropagation
				

				//Calcular a sensibilidade
				sensibility.set(numberLayers-2, errorOutput);
				for (eachLayer = numberLayers-3; eachLayer >= 0; eachLayer--) {
					Double [] tempSensibility = new Double[numberNeurons[eachLayer+1]];
					
					for (int numberNeuronsLayer = numberNeurons[eachLayer+1]-1; numberNeuronsLayer >= 0; numberNeuronsLayer--) {
						double ePowNet = Math.exp(-newNet.get(eachLayer)[numberNeuronsLayer]);
						double derivate = (ePowNet) / (Math.pow( (ePowNet+1) , 2));
//						double derivate = newFnet.get(eachLayer)[numberNeuronsLayer] *(1-newFnet.get(eachLayer)[numberNeuronsLayer]);
						double sumWeightSensibility = 0.0;
						
						for (int i = 0; i < numberNeurons[eachLayer+2]; i++) {
							for (int j = 0; j < numberNeurons[eachLayer+1]; j++) {

								sumWeightSensibility += weight.get(eachLayer+1)[j][i]*sensibility.get(eachLayer+1)[i];
								
							}
						}
						
						tempSensibility[numberNeuronsLayer] =  Math.ulp(derivate*sumWeightSensibility);
						
					}
					sensibility.set(eachLayer, tempSensibility);
					
				}
				
				
				for (eachLayer = 0; eachLayer < numberLayers-1; eachLayer++) {
					
					Double [][] pesosInternos = new Double[numberNeurons[eachLayer]][numberNeurons[eachLayer+1]];
					Double [] biasX = new Double[numberNeurons[eachLayer+1]];
					for (int i = 0; i < numberNeurons[eachLayer+1]; i++) {
						biasX[i] = bias.get(eachLayer)[i] + alfa*sensibility.get(eachLayer)[i];
						
						for (int j = 0; j < numberNeurons[eachLayer]; j++) {
							if(eachLayer==0){

								pesosInternos[j][i] = Math.ulp(weight.get(eachLayer)[j][i]+
										(alfa*sensibility.get(eachLayer)[i]*input[eachInput][j]));
							}else{
								
								pesosInternos[j][i] = Math.ulp(weight.get(eachLayer)[j][i]+
										(alfa*sensibility.get(eachLayer)[i]*newFnet.get(eachLayer)[i])+
										beta*oldWeight.get(eachLayer)[j][i]);
							}
//							System.out.println(pesosInternos[j][i]);
							
						}
						
					}
					bias.set(eachLayer, biasX);
					oldWeight.set(eachLayer, weight.get(eachLayer));
					weight.set(eachLayer, pesosInternos);
					
				}
				
				
				
		
			}
		}
		System.out.println("acabou treinamento");
		return errorOutput;
		
	}




	
	public static void readData(String file1) throws IOException{
        BufferedReader dataBR1 = new BufferedReader(new FileReader(new File(file1)));
        String line = "";

        ArrayList<String[]> dataArr = new ArrayList<String[]>(); 

        while ((line = dataBR1.readLine()) != null) { 
        	String[] value = line.split(";");
        	dataArr.add(value); 
            
        }
        Collections.shuffle(dataArr);
        Double [][] entradasIniciais = new Double[dataArr.size()][dataArr.get(0).length-1];
        Double [][] saidasIniciais = new Double[dataArr.size()][5];
        output = new Double[dataArr.size()][5];
        input =  new Double[dataArr.size()][dataArr.get(0).length-1];
        for (int i = 0; i < dataArr.size(); i++) {
            for (int x = 0; x < dataArr.get(i).length; x++) {	           	
            	if(x == dataArr.get(i).length-1){        
            		saidasIniciais[i][0] = 0.0;
            		saidasIniciais[i][1] = 0.0;
            		saidasIniciais[i][2] = 0.0;
            		saidasIniciais[i][3] = 0.0;
            		saidasIniciais[i][4] = 0.0;
            		double c = Double.parseDouble(dataArr.get(i)[x].replace(',','.'));
            		saidasIniciais[i][(int)c] = 1.0;
            		
            	}else{
            		entradasIniciais[i][x] = Double.parseDouble(dataArr.get(i)[x].replace(',','.'));
            	}
            	
            	
            }
        }
        
        
        dataBR1.close();
        input = (entradasIniciais);
        output = (saidasIniciais);
//        System.out.println(entradasIniciais.length);
//        System.out.println(entradasIniciais[0].length);
    }



	public double[] evaluate() {
//		System.out.println("------evaluate1");
		double []answer = new double[numberOutputNeurons];
		for (int i = 0; i < numberOutputNeurons; i++) {
//			System.out.println(errorOutput[i]);
			answer[i] = (double) errorOutput[i];
//			System.out.println(answer[i]);
		}
//		System.out.println("------evaluate2");
		return answer;
	}
	
	
}
